version: '3'

services:
  kafka:
    image: bitnami/kafka
    restart: always
    hostname: ${KAFKA_HOST}
    ports:
         - '${KAFKA_PORT}:${KAFKA_PORT}'
#    volumes:
#      - kafka_data:/bitnami/kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:${KAFKA_PORT}
      - KAFKA_ADVERTISED_PORT=${KAFKA_PORT}
      - KAFKA_CFG_ZOOKEEPER_CONNECT=${ZOOKEEPER_HOST}:${ZOOKEEPER_PORT}
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_LOG4J_ROOT_LOGLEVEL=WARN
      - KAFKA_TOOLS_LOG4J_LOGLEVEL=ERROR
#      - KAFKA_LOG4J_LOGGERS="org.apache.zookeeper=ERROR,org.apache.kafka=ERROR,kafka=ERROR,kafka.cluster=ERROR,kafka.controller=ERROR,kafka.coordinator=ERROR,kafka.log=ERROR,kafka.server=ERROR,kafka.zookeeper=ERROR,state.change.logger=ERROR"
      # disable kafka logs
      - KAFKA_LOG4J_LOGGERS="kafka=ERROR,kafka.cluster=ERROR,kafka.controller=ERROR,kafka.coordinator=ERROR,kafka.log=ERROR,kafka.server=ERROR,kafka.zookeeper=ERROR,state.change.logger=ERROR"
#      - KAFKA_LOG4J_LOGGERS=org.apache.zookeeper=ERROR, org.apache.kafka=ERROR, kafka=ERROR, kafka.cluster=ERROR, kafka.controller=ERROR, kafka.coordinator=ERROR, kafka.log=ERROR, kafka.server=ERROR, kafka.zookeeper=ERROR, state.change.logger=ERROR
    depends_on:
      - zookeeper

  kafka-actualizer:
    image: bitnami/kafka
    depends_on:
      - kafka
    volumes:
      - ./docker/wait-for-it.sh:/wait-for-it.sh
    command: |
      bash -c '/wait-for-it.sh --timeout=0 -s ${KAFKA_HOST}:${KAFKA_PORT} && \
      kafka-topics.sh --create --if-not-exists --topic topic --partitions ${KAFKA_PARTITIONS_NUM} --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT} && \
      kafka-topics.sh --create --if-not-exists --topic topic_result --partitions ${KAFKA_PARTITIONS_NUM} --bootstrap-server ${KAFKA_HOST}:${KAFKA_PORT} && \
      exit 0'
    env_file:
      - .env
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  zookeeper:
    image: bitnami/zookeeper
    restart: always
    hostname: ${ZOOKEEPER_HOST}
    ports:
         - '${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

