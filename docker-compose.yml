version: '3'

services:

  kafka-actualizer:
    image: bitnami/kafka
    depends_on:
      - kafka
    volumes:
      - ./docker/wait-for-it.sh:/wait-for-it.sh
    command: |
      bash -c '/wait-for-it.sh --timeout=0 -s kafka:9092 && \
      kafka-topics.sh --create --if-not-exists --topic topic --partitions ${KAFKA_PARTITIONS_NUM} --bootstrap-server kafka:9092 && \
      kafka-topics.sh --create --if-not-exists --topic topic_result --partitions ${KAFKA_PARTITIONS_NUM} --bootstrap-server kafka:9092 && \
      exit 0'
    env_file:
      - .env
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored

  postgres:
    image: postgres:14
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - 5444:5432
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data
      - POSTGRES_USER=postgres

  mongodb:
    image: mongo
    env_file:
      - .env
    restart: always
    volumes:
      - mongo_data:/data/db
#    environment:
#      MONGO_INITDB_ROOT_USERNAME: root
#      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - 27019:27017

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8087:8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
#      ME_CONFIG_MONGODB_ADMINUSERNAME: root
#      ME_CONFIG_MONGODB_ADMINPASSWORD: example
    depends_on:
      - mongodb


  producer:
    build: docker/producer
    command: python main.py
#    command: python test.py
    volumes:
      - ./docker/wait-for-it.sh:/wait-for-it.sh
      - ./docker/producer/src:/app/src
      - ./docker/producer/log:/app/log
    restart: always
    depends_on:
      - kafka
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=y

  consumer:
    build: docker/consumer
#    command: sleep 600
    command: python main.py
    volumes:
      - ./docker/consumer/src:/app/src
      - ./docker/consumer/log:/app/log
      - ./docker/consumer/entrypoint.sh:/app/entrypoint.sh
    restart: always
    depends_on:
      - kafka
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=y

volumes:
#  kafka_data: {}
  pg_data: {}
  mongo_data: {}

