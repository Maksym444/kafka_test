version: '3'

services:

  postgres:
    image: postgres:14
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - 5444:5432
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data

  mongodb:
    image: mongo
    env_file:
      - .env
    restart: always
    volumes:
      - mongo_data:/data/db
    ports:
      - 27019:27017

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8087:8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
    depends_on:
      - mongodb

  manager:
    build: services/manager
    command: python main.py
    volumes:
      - ./services/manager/src:/app/src
    ports:
      - ${MANAGER_RESTAPI_PORT}:${MANAGER_RESTAPI_PORT}
    restart: always
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=y
    depends_on:
      - kafka
      - mongodb

  telegram_fetcher:
    build: services/fetchers/telegram
    command: >
      sh -c "/wait-for-it.sh --timeout=10 -s manager:8080 &&
             python main.py"
    volumes:
      - ./services/fetchers/telegram/src:/app/src
      - $PWD/services/fetchers/telegram/src/media:/app/src/media
      - ./services/fetchers/telegram/log:/app/log
      - ./services/wait-for-it.sh:/wait-for-it.sh
    restart: always
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=y
    depends_on:
      - manager


  twitter_fetcher:
    build: services/fetchers/twitter
    command: >
      sh -c "/wait-for-it.sh --timeout=10 -s manager:8080 &&
             python main.py"
    volumes:
      - ./services/fetchers/twitter/src:/app/src
      - ./services/fetchers/twitter/log:/app/log
      - ./services/wait-for-it.sh:/wait-for-it.sh
    restart: always
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=y
    depends_on:
      - manager

  processor:
    build: services/processor
    command: python main.py
    volumes:
      - ./services/processor/src:/app/src
      - ./services/processor/log:/app/log
    restart: always
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=y
    depends_on:
      - kafka


  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.4.0
#    container_name: elasticsearch
    restart: always
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - 9203:9200

  kibana:
#    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.4.0
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200    # address of elasticsearch docker container which kibana will connect
    ports:
      - 5603:5601
    depends_on:
      - elasticsearch

  searcher:
    build: services/searcher
    command: python main.py
    volumes:
      - ./services/searcher/src:/app/src
      - $PWD/services/fetchers/telegram/src/media:/app/src/static/media
    ports:
      - ${SEARCHER_RESTAPI_PORT}:${SEARCHER_RESTAPI_PORT}
    restart: always
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=y
    depends_on:
      - elasticsearch


volumes:
#  kafka_data: {}
  pg_data: {}
  mongo_data: {}
  elasticsearch_data: {}
#  fetcher_media: {}

